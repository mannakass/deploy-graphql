[{"/home/mannakass/kood/github/deploy-graphql/src/index.js":"1","/home/mannakass/kood/github/deploy-graphql/src/App.js":"2","/home/mannakass/kood/github/deploy-graphql/src/components/FetchForAll.js":"3","/home/mannakass/kood/github/deploy-graphql/src/components/ProfileInfo.js":"4","/home/mannakass/kood/github/deploy-graphql/src/components/TaskGraph.js":"5","/home/mannakass/kood/github/deploy-graphql/src/components/LineGraph.js":"6","/home/mannakass/kood/github/deploy-graphql/src/other/processData.js":"7","/home/mannakass/kood/github/deploy-graphql/src/other/queries.js":"8","/home/mannakass/kood/github/deploy-graphql/src/Hooks/useGQLQurery.js":"9"},{"size":412,"mtime":1677576468956,"results":"10","hashOfConfig":"11"},{"size":191,"mtime":1678091406432,"results":"12","hashOfConfig":"11"},{"size":1878,"mtime":1678105165009,"results":"13","hashOfConfig":"11"},{"size":881,"mtime":1678091636223,"results":"14","hashOfConfig":"11"},{"size":2146,"mtime":1678091703016,"results":"15","hashOfConfig":"11"},{"size":2050,"mtime":1678091849249,"results":"16","hashOfConfig":"11"},{"size":1668,"mtime":1678091801338,"results":"17","hashOfConfig":"11"},{"size":1883,"mtime":1677925174762,"results":"18","hashOfConfig":"11"},{"size":385,"mtime":1677926088090,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"153k1uj",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"/home/mannakass/kood/github/deploy-graphql/src/index.js",[],[],"/home/mannakass/kood/github/deploy-graphql/src/App.js",[],[],"/home/mannakass/kood/github/deploy-graphql/src/components/FetchForAll.js",[],[],"/home/mannakass/kood/github/deploy-graphql/src/components/ProfileInfo.js",[],[],"/home/mannakass/kood/github/deploy-graphql/src/components/TaskGraph.js",["50"],[],"import { React, useRef, useEffect } from 'react'\nimport * as d3 from 'd3'\n\nfunction TaskGraph({ filterAudits }) {\n\n    const svg2Ref = useRef();\n    let taskRef = useRef()\n    taskRef.current = filterAudits.sort((a, b) => (a.amount) - (b.amount))\n\n    useEffect(() => {\n        const width = 1000;\n        const height = 600;\n        const margin = { top: 50, bottom: 50, left: 50, right: 50 }\n        const Y = d3.map(taskRef.current, d => d.amount);\n        const X = d3.map(taskRef.current, d => d.object.name)\n\n        const svg = d3.select(svg2Ref.current)\n            .attr('height', height - margin.top - margin.bottom)\n            .attr('width', width - margin.left - margin.right)\n            .attr('viewBox', [0, 0, width, height])\n\n\n        const xScale = d3.scaleBand()\n            .domain(d3.range(taskRef.current.length))\n            .range([margin.left, width - margin.right])\n            .padding(0.1)\n\n\n        const yScale = d3.scaleLinear()\n            .domain([0, d3.max(Y)])\n            .range([height - margin.bottom, margin.top])\n\n        svg\n            .append('g')\n            .attr('fill', '#A7727D')\n            .selectAll('rect')\n            .data(Y)\n            .join('rect')\n            .attr('x', (d, i) => xScale(i))\n            .attr('y', (d) => yScale(d))\n            .attr('height', (d) => yScale(0) - yScale(d))\n            .attr('width', xScale.bandwidth())\n\n        function yAxis(g) {\n            g.attr('transform', `translate(${margin.left}, 0)`)\n            g.call(d3.axisLeft(yScale))\n        }\n\n        function xAxis(g) {\n            g.attr('transform', `translate(0, ${height - margin.bottom})`)\n                .call(d3.axisBottom(xScale).tickFormat(i => X[i]))\n        }\n\n        svg.append('g').call(yAxis)\n        svg.append('g').call(xAxis)\n        svg.node()\n    }, taskRef.current)\n\n    return (\n        <div className='task-graph'>\n            <p className='task-graph-title'>XP by task</p>\n            <p className='task-graph-subcomment'>*Div 01 represents the XP of being a mentor for second batch</p>\n            <svg ref={svg2Ref}></svg>\n        </div>\n    )\n}\nexport default TaskGraph\n","/home/mannakass/kood/github/deploy-graphql/src/components/LineGraph.js",["51","52"],[],"import { React, useRef, useEffect } from 'react';\nimport * as d3 from 'd3'\n\nfunction XPGraph({ increaseXP, filterAudits }) {\n\n    let totalXP = 0;\n    filterAudits.map(project => totalXP += project.amount)\n\n    let XPRef = useRef()\n    XPRef.current = increaseXP;\n\n    const svgRef = useRef()\n    useEffect(() => {\n        // setting up svg\n        const width = 1000;\n        const height = 600;\n        const margin = { top: 50, bottom: 50, left: 50, right: 50 }\n        const Y = d3.map(XPRef.current, d => d.amount);\n        const X = d3.map(XPRef.current, d => d.createdAt)\n\n        const svg = d3.select(svgRef.current)\n            .attr('height', height - margin.top - margin.bottom)\n            .attr('width', width - margin.left - margin.right)\n            .attr('viewBox', [0, 0, width, height])\n\n        const xScale = d3.scaleUtc()\n            .domain(d3.extent(X))\n            .range([margin.left, width - margin.right])\n\n        const yScale = d3.scaleLinear()\n            .domain([0, totalXP])\n            .range([height - margin.bottom, margin.top])\n\n        const scaleLine = d3.line()\n            .x((d, i) => xScale(X[i]))\n            .y(yScale)\n            .curve(d3.curveLinear)\n\n        svg\n            .selectAll('.line')\n            .data([Y])\n            .join('path')\n            .attr('d', d => scaleLine(d))\n            .attr('fill', 'none')\n            .attr('stroke', '#A7727D')\n\n        function yAxis(g) {\n            g.attr('transform', `translate(${margin.left}, 0)`)\n            g.call(d3.axisLeft(yScale))\n        }\n\n        function xAxis(g) {\n            g.attr('transform', `translate(0, ${height - margin.bottom})`)\n                .call(d3.axisBottom(xScale).ticks(width / 80).tickSizeOuter(0))\n        }\n\n        svg.append('g').call(yAxis)\n        svg.append('g').call(xAxis)\n    }, XPRef.current)\n\n\n    return (\n        <div className='line-graph'>\n            <p className='line-graph-title'>XP progression over time</p>\n            <svg ref={svgRef}></svg>\n        </div>\n    )\n}\n\nexport default XPGraph\n","/home/mannakass/kood/github/deploy-graphql/src/other/processData.js",[],[],"/home/mannakass/kood/github/deploy-graphql/src/other/queries.js",[],[],"/home/mannakass/kood/github/deploy-graphql/src/Hooks/useGQLQurery.js",["53"],[],"import { useQuery } from \"react-query\";\nimport { GraphQLClient, request } from \"graphql-request\";\n\n\nexport const useGQLQuery = (key, query, variables) => {\n    const endpoint = 'https://01.kood.tech/api/graphql-engine/v1/graphql';\n\n    const fetchData = async () => await request(endpoint, query, variables);\n\n    return useQuery([...key], fetchData, { refetchOnWindowFocus: false })\n}",{"ruleId":"54","severity":1,"message":"55","line":57,"column":8,"nodeType":"56","endLine":57,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":59,"column":8,"nodeType":"56","endLine":59,"endColumn":21},{"ruleId":"54","severity":1,"message":"57","line":59,"column":8,"nodeType":"56","endLine":59,"endColumn":21,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","MemberExpression","React Hook useEffect has a missing dependency: 'totalXP'. Either include it or remove the dependency array.",["63"],"no-unused-vars","'GraphQLClient' is defined but never used.","Identifier","unusedVar",{"desc":"64","fix":"65"},"Update the dependencies array to be: [totalXP]",{"range":"66","text":"67"},[1826,1839],"[totalXP]"]