{"ast":null,"code":"/* import * as d3 from \"d3\";\n\nexport function barGraph(filterAudits) {\n    const width = 800;\n    const height = 400;\n    const margin = { top: 50, bottom: 50, left: 50, right: 50 }\n    const Y = d3.map(filterAudits, d => d.amount);\n    const X = d3.map(filterAudits, d => d.object.name)\n    console.log(X)\n\n    const svg = d3.select('.App')\n        .append('svg')\n        .attr('height', height - margin.top - margin.bottom)\n        .attr('width', width - margin.left - margin.right)\n        .attr('viewBox', [0, 0, width, height])\n\n\n    const xScale = d3.scaleBand()\n        .domain(d3.range(filterAudits.length))\n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n\n\n    const yScale = d3.scaleLinear()\n        .domain([0, d3.max(Y)])\n        .range([height - margin.bottom, margin.top])\n\n    svg\n        .append('g')\n        .attr('fill', 'royalblue')\n        .selectAll('rect')\n        .data(Y)\n        .join('rect')\n        .attr('x', (d, i) => xScale(i))\n        .attr('y', (d) => yScale(d))\n        .attr('height', (d) => yScale(0) - yScale(d))\n        .attr('width', xScale.bandwidth())\n\n    function yAxis(g) {\n        g.attr('transform', `translate(${margin.left}, 0)`)\n        g.call(d3.axisLeft(yScale))\n    }\n\n    function xAxis(g) {\n        g.attr('transform', `translate(0, ${height - margin.bottom})`)\n            .call(d3.axisBottom(xScale).tickFormat(i => X[i]))\n    }\n\n\n\n    svg.append('g').call(yAxis)\n    svg.append('g').call(xAxis)\n    svg.node()\n}\n\nexport function lineGraph(XPData) {\n    console.log(XPData)\n} */","map":{"version":3,"names":[],"sources":["/home/mannakass/kood/graphql/src/other/graphs.js"],"sourcesContent":["/* import * as d3 from \"d3\";\n\nexport function barGraph(filterAudits) {\n    const width = 800;\n    const height = 400;\n    const margin = { top: 50, bottom: 50, left: 50, right: 50 }\n    const Y = d3.map(filterAudits, d => d.amount);\n    const X = d3.map(filterAudits, d => d.object.name)\n    console.log(X)\n\n    const svg = d3.select('.App')\n        .append('svg')\n        .attr('height', height - margin.top - margin.bottom)\n        .attr('width', width - margin.left - margin.right)\n        .attr('viewBox', [0, 0, width, height])\n\n\n    const xScale = d3.scaleBand()\n        .domain(d3.range(filterAudits.length))\n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n\n\n    const yScale = d3.scaleLinear()\n        .domain([0, d3.max(Y)])\n        .range([height - margin.bottom, margin.top])\n\n    svg\n        .append('g')\n        .attr('fill', 'royalblue')\n        .selectAll('rect')\n        .data(Y)\n        .join('rect')\n        .attr('x', (d, i) => xScale(i))\n        .attr('y', (d) => yScale(d))\n        .attr('height', (d) => yScale(0) - yScale(d))\n        .attr('width', xScale.bandwidth())\n\n    function yAxis(g) {\n        g.attr('transform', `translate(${margin.left}, 0)`)\n        g.call(d3.axisLeft(yScale))\n    }\n\n    function xAxis(g) {\n        g.attr('transform', `translate(0, ${height - margin.bottom})`)\n            .call(d3.axisBottom(xScale).tickFormat(i => X[i]))\n    }\n\n\n\n    svg.append('g').call(yAxis)\n    svg.append('g').call(xAxis)\n    svg.node()\n}\n\nexport function lineGraph(XPData) {\n    console.log(XPData)\n} */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}