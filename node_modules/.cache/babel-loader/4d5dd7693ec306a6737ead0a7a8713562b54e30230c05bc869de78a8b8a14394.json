{"ast":null,"code":"var _jsxFileName = \"/home/mannakass/kood/graphql/src/App.js\",\n  _s = $RefreshSig$();\nimport ProfileInfo from './components/ProfileInfo.js';\nimport LevelGraph from './components/LevelGraph.js';\nimport XPGraph from './components/XPGraph.js';\nimport { useGQLQuery } from './/other/useGQLQurery';\nimport { GET_USER, GET_FINISHED_PROJECTS, GET_DATE_AND_XP, GET_LEVEL } from './/other/queries';\nimport { removeAudits } from './/other/remove.js';\nimport './app.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FetchForAll() {\n  _s();\n  const userProfile = useGQLQuery('user', GET_USER);\n  const tasks = useGQLQuery('task', GET_FINISHED_PROJECTS);\n  const projectsData = useGQLQuery('xp', GET_DATE_AND_XP);\n  const levels = useGQLQuery('level', GET_LEVEL);\n\n  /* if you don't use isLoading it is going to throw an error */\n  if (userProfile.isLoading || tasks.isLoading || projectsData.isLoading || levels.isLoading) return \"Loading...\";\n  // if (userProfile.error) return \"An error has occurred: \" + error.message;\n\n  let correctPaths = [];\n  let middleman = [];\n\n  /* find all the correct paths */\n  tasks.data.user[0].progresses.map(path => {\n    let proovime = path.path;\n    correctPaths.push(proovime);\n  });\n\n  /* find all the possible paths */\n  const possiblePaths = projectsData.data.user[0].transactions.map(project => {\n    if (project.object.type === 'module') {\n      middleman.push(project);\n    }\n    return JSON.parse(JSON.stringify(project.path));\n  });\n  const filterAudits = removeAudits(correctPaths, possiblePaths, middleman, projectsData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ProfileInfo, {\n      filterAudits: filterAudits,\n      userProfile: userProfile,\n      levels: levels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XPGraph, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LevelGraph, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(FetchForAll, \"AxMo6b/3sVVvveeGdBWC7EWeOcs=\", false, function () {\n  return [useGQLQuery, useGQLQuery, useGQLQuery, useGQLQuery];\n});\n_c = FetchForAll;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(FetchForAll, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\n\n/* \nWhat needs to be done:\n\n1. Choose the information you wish to display (xp progress, level progress) and only about myself (mannakass).\nFor that I need:\n\n  - xp amount (every xp I've ever gotten exluding first sprint because it was sisseastumiskatse)\n  - levels throughout the time (without first sprint, starting from september 13))\n  - date (when I got some xp or level)\n\n2. Get that information using react query\n\n3. Do some needed calculations (because as I've heard, it is veri much needed)\n\n4. Display it in two line graphs made with SVG\n\n*/\nvar _c, _c2;\n$RefreshReg$(_c, \"FetchForAll\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["ProfileInfo","LevelGraph","XPGraph","useGQLQuery","GET_USER","GET_FINISHED_PROJECTS","GET_DATE_AND_XP","GET_LEVEL","removeAudits","FetchForAll","userProfile","tasks","projectsData","levels","isLoading","correctPaths","middleman","data","user","progresses","map","path","proovime","push","possiblePaths","transactions","project","object","type","JSON","parse","stringify","filterAudits","App"],"sources":["/home/mannakass/kood/graphql/src/App.js"],"sourcesContent":["import ProfileInfo from './components/ProfileInfo.js'\nimport LevelGraph from './components/LevelGraph.js';\nimport XPGraph from './components/XPGraph.js';\nimport { useGQLQuery } from './/other/useGQLQurery'\nimport { GET_USER, GET_FINISHED_PROJECTS, GET_DATE_AND_XP, GET_LEVEL } from './/other/queries';\nimport { removeAudits } from './/other/remove.js';\nimport './app.css'\n\nfunction FetchForAll() {\n\n  const userProfile = useGQLQuery('user', GET_USER);\n  const tasks = useGQLQuery('task', GET_FINISHED_PROJECTS);\n  const projectsData = useGQLQuery('xp', GET_DATE_AND_XP);\n  const levels = useGQLQuery('level', GET_LEVEL);\n\n  /* if you don't use isLoading it is going to throw an error */\n  if (userProfile.isLoading || tasks.isLoading || projectsData.isLoading || levels.isLoading) return \"Loading...\";\n  // if (userProfile.error) return \"An error has occurred: \" + error.message;\n\n  let correctPaths = [];\n  let middleman = [];\n\n\n  /* find all the correct paths */\n  tasks.data.user[0].progresses.map(path => {\n    let proovime = path.path\n    correctPaths.push(proovime)\n  })\n\n  /* find all the possible paths */\n  const possiblePaths = projectsData.data.user[0].transactions.map(project => {\n    if (project.object.type === 'module') {\n      middleman.push(project)\n    }\n    return JSON.parse(JSON.stringify(project.path))\n  })\n\n  const filterAudits = removeAudits(correctPaths, possiblePaths, middleman, projectsData);\n\n  return (\n    <div>\n      <ProfileInfo\n        filterAudits={filterAudits}\n        userProfile={userProfile}\n        levels={levels}\n      />\n      <XPGraph />\n      <LevelGraph />\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FetchForAll />\n    </div>\n  );\n}\n\nexport default App;\n\n/* \nWhat needs to be done:\n\n1. Choose the information you wish to display (xp progress, level progress) and only about myself (mannakass).\nFor that I need:\n\n  - xp amount (every xp I've ever gotten exluding first sprint because it was sisseastumiskatse)\n  - levels throughout the time (without first sprint, starting from september 13))\n  - date (when I got some xp or level)\n\n2. Get that information using react query\n\n3. Do some needed calculations (because as I've heard, it is veri much needed)\n\n4. Display it in two line graphs made with SVG\n\n*/"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,6BAA6B;AACrD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,QAAQ,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,SAAS,QAAQ,kBAAkB;AAC9F,SAASC,YAAY,QAAQ,oBAAoB;AACjD,OAAO,WAAW;AAAA;AAElB,SAASC,WAAW,GAAG;EAAA;EAErB,MAAMC,WAAW,GAAGP,WAAW,CAAC,MAAM,EAAEC,QAAQ,CAAC;EACjD,MAAMO,KAAK,GAAGR,WAAW,CAAC,MAAM,EAAEE,qBAAqB,CAAC;EACxD,MAAMO,YAAY,GAAGT,WAAW,CAAC,IAAI,EAAEG,eAAe,CAAC;EACvD,MAAMO,MAAM,GAAGV,WAAW,CAAC,OAAO,EAAEI,SAAS,CAAC;;EAE9C;EACA,IAAIG,WAAW,CAACI,SAAS,IAAIH,KAAK,CAACG,SAAS,IAAIF,YAAY,CAACE,SAAS,IAAID,MAAM,CAACC,SAAS,EAAE,OAAO,YAAY;EAC/G;;EAEA,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIC,SAAS,GAAG,EAAE;;EAGlB;EACAL,KAAK,CAACM,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,GAAG,CAACC,IAAI,IAAI;IACxC,IAAIC,QAAQ,GAAGD,IAAI,CAACA,IAAI;IACxBN,YAAY,CAACQ,IAAI,CAACD,QAAQ,CAAC;EAC7B,CAAC,CAAC;;EAEF;EACA,MAAME,aAAa,GAAGZ,YAAY,CAACK,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACO,YAAY,CAACL,GAAG,CAACM,OAAO,IAAI;IAC1E,IAAIA,OAAO,CAACC,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;MACpCZ,SAAS,CAACO,IAAI,CAACG,OAAO,CAAC;IACzB;IACA,OAAOG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACL,OAAO,CAACL,IAAI,CAAC,CAAC;EACjD,CAAC,CAAC;EAEF,MAAMW,YAAY,GAAGxB,YAAY,CAACO,YAAY,EAAES,aAAa,EAAER,SAAS,EAAEJ,YAAY,CAAC;EAEvF,oBACE;IAAA,wBACE,QAAC,WAAW;MACV,YAAY,EAAEoB,YAAa;MAC3B,WAAW,EAAEtB,WAAY;MACzB,MAAM,EAAEG;IAAO;MAAA;MAAA;MAAA;IAAA,QACf,eACF,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG,eACX,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACV;AAEV;AAAC,GA1CQJ,WAAW;EAAA,QAEEN,WAAW,EACjBA,WAAW,EACJA,WAAW,EACjBA,WAAW;AAAA;AAAA,KALnBM,WAAW;AA4CpB,SAASwB,GAAG,GAAG;EACb,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB,QAAC,WAAW;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACX;AAEV;AAAC,MANQA,GAAG;AAQZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}