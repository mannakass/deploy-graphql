{"ast":null,"code":"import ProfileInfo from'./ProfileInfo.js';import TaskGraph from'./TaskGraph.js';import XPGraph from'./XPGraph.js';import{useGQLQuery}from'../Hooks/useGQLQurery';import{GET_USER,GET_FINISHED_PROJECTS,GET_DATE_AND_XP,GET_LEVEL}from'../other/queries';import{removeAudits,increasingXP}from'../other/processData.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function FetchForAll(){var userProfile=useGQLQuery('user',GET_USER);var tasks=useGQLQuery('task',GET_FINISHED_PROJECTS);var projectsData=useGQLQuery('xp',GET_DATE_AND_XP);var levels=useGQLQuery('level',GET_LEVEL);/* if you don't use isLoading it is going to throw an error */if(userProfile.isLoading||tasks.isLoading||projectsData.isLoading||levels.isLoading)return\"Loading...\";// if (userProfile.error) return \"An error has occurred: \" + error.message;\nvar correctPaths=[];var middleman=[];/* find all the correct paths */tasks.data.user[0].progresses.map(function(path){var proovime=path.path;correctPaths.push(proovime);return correctPaths;});/* find all the possible paths */var possiblePaths=projectsData.data.user[0].transactions.map(function(project){if(project.object.type==='module'){middleman.push(project);}return JSON.parse(JSON.stringify(project.path));});/* remove audits */var filterAudits=removeAudits(correctPaths,possiblePaths,middleman,projectsData);var increaseXP=increasingXP(filterAudits);console.log(increaseXP);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(ProfileInfo,{filterAudits:filterAudits,userProfile:userProfile,levels:levels}),/*#__PURE__*/_jsx(XPGraph,{increaseXP:increaseXP,filterAudits:filterAudits}),/*#__PURE__*/_jsx(TaskGraph,{filterAudits:filterAudits})]});}","map":{"version":3,"names":["ProfileInfo","TaskGraph","XPGraph","useGQLQuery","GET_USER","GET_FINISHED_PROJECTS","GET_DATE_AND_XP","GET_LEVEL","removeAudits","increasingXP","FetchForAll","userProfile","tasks","projectsData","levels","isLoading","correctPaths","middleman","data","user","progresses","map","path","proovime","push","possiblePaths","transactions","project","object","type","JSON","parse","stringify","filterAudits","increaseXP","console","log"],"sources":["/home/mannakass/kood/graphql/src/components/FetchForAll.js"],"sourcesContent":["import ProfileInfo from './ProfileInfo.js'\nimport TaskGraph from './TaskGraph.js';\nimport XPGraph from './XPGraph.js';\nimport { useGQLQuery } from '../Hooks/useGQLQurery'\nimport { GET_USER, GET_FINISHED_PROJECTS, GET_DATE_AND_XP, GET_LEVEL } from '../other/queries';\nimport { removeAudits, increasingXP } from '../other/processData.js';\n\nexport function FetchForAll() {\n\n\n    const userProfile = useGQLQuery('user', GET_USER);\n    const tasks = useGQLQuery('task', GET_FINISHED_PROJECTS);\n    const projectsData = useGQLQuery('xp', GET_DATE_AND_XP);\n    const levels = useGQLQuery('level', GET_LEVEL);\n\n    /* if you don't use isLoading it is going to throw an error */\n    if (userProfile.isLoading || tasks.isLoading || projectsData.isLoading || levels.isLoading) return \"Loading...\";\n    // if (userProfile.error) return \"An error has occurred: \" + error.message;\n\n    let correctPaths = [];\n    let middleman = [];\n\n\n    /* find all the correct paths */\n    tasks.data.user[0].progresses.map(path => {\n        let proovime = path.path\n        correctPaths.push(proovime)\n\n        return correctPaths\n    })\n\n    /* find all the possible paths */\n    const possiblePaths = projectsData.data.user[0].transactions.map(project => {\n        if (project.object.type === 'module') {\n            middleman.push(project)\n        }\n        return JSON.parse(JSON.stringify(project.path))\n    })\n\n    /* remove audits */\n    let filterAudits = removeAudits(correctPaths, possiblePaths, middleman, projectsData);\n    let increaseXP = increasingXP(filterAudits)\n    console.log(increaseXP)\n\n    return (\n        <div>\n            <ProfileInfo\n                filterAudits={filterAudits}\n                userProfile={userProfile}\n                levels={levels}\n            />\n            <XPGraph\n                increaseXP={increaseXP}\n                filterAudits={filterAudits}\n            />\n            <TaskGraph\n                filterAudits={filterAudits}\n            />\n\n        </div>\n    )\n}"],"mappings":"AAAA,MAAOA,YAAW,KAAM,kBAAkB,CAC1C,MAAOC,UAAS,KAAM,gBAAgB,CACtC,MAAOC,QAAO,KAAM,cAAc,CAClC,OAASC,WAAW,KAAQ,uBAAuB,CACnD,OAASC,QAAQ,CAAEC,qBAAqB,CAAEC,eAAe,CAAEC,SAAS,KAAQ,kBAAkB,CAC9F,OAASC,YAAY,CAAEC,YAAY,KAAQ,yBAAyB,CAAC,wFAErE,MAAO,SAASC,YAAW,EAAG,CAG1B,GAAMC,YAAW,CAAGR,WAAW,CAAC,MAAM,CAAEC,QAAQ,CAAC,CACjD,GAAMQ,MAAK,CAAGT,WAAW,CAAC,MAAM,CAAEE,qBAAqB,CAAC,CACxD,GAAMQ,aAAY,CAAGV,WAAW,CAAC,IAAI,CAAEG,eAAe,CAAC,CACvD,GAAMQ,OAAM,CAAGX,WAAW,CAAC,OAAO,CAAEI,SAAS,CAAC,CAE9C,8DACA,GAAII,WAAW,CAACI,SAAS,EAAIH,KAAK,CAACG,SAAS,EAAIF,YAAY,CAACE,SAAS,EAAID,MAAM,CAACC,SAAS,CAAE,MAAO,YAAY,CAC/G;AAEA,GAAIC,aAAY,CAAG,EAAE,CACrB,GAAIC,UAAS,CAAG,EAAE,CAGlB,gCACAL,KAAK,CAACM,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,GAAG,CAAC,SAAAC,IAAI,CAAI,CACtC,GAAIC,SAAQ,CAAGD,IAAI,CAACA,IAAI,CACxBN,YAAY,CAACQ,IAAI,CAACD,QAAQ,CAAC,CAE3B,MAAOP,aAAY,CACvB,CAAC,CAAC,CAEF,iCACA,GAAMS,cAAa,CAAGZ,YAAY,CAACK,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACO,YAAY,CAACL,GAAG,CAAC,SAAAM,OAAO,CAAI,CACxE,GAAIA,OAAO,CAACC,MAAM,CAACC,IAAI,GAAK,QAAQ,CAAE,CAClCZ,SAAS,CAACO,IAAI,CAACG,OAAO,CAAC,CAC3B,CACA,MAAOG,KAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACL,OAAO,CAACL,IAAI,CAAC,CAAC,CACnD,CAAC,CAAC,CAEF,mBACA,GAAIW,aAAY,CAAGzB,YAAY,CAACQ,YAAY,CAAES,aAAa,CAAER,SAAS,CAAEJ,YAAY,CAAC,CACrF,GAAIqB,WAAU,CAAGzB,YAAY,CAACwB,YAAY,CAAC,CAC3CE,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC,CAEvB,mBACI,oCACI,KAAC,WAAW,EACR,YAAY,CAAED,YAAa,CAC3B,WAAW,CAAEtB,WAAY,CACzB,MAAM,CAAEG,MAAO,EACjB,cACF,KAAC,OAAO,EACJ,UAAU,CAAEoB,UAAW,CACvB,YAAY,CAAED,YAAa,EAC7B,cACF,KAAC,SAAS,EACN,YAAY,CAAEA,YAAa,EAC7B,GAEA,CAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}